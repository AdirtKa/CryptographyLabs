from LFSR import LFSR


def bytes_to_bits(data: bytes) -> str:
    return ''.join(f"{byte:08b}" for byte in data)


def encrypt(plaintext: str, lfsr: LFSR) -> bytes:
    """–®–∏—Ñ—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø–æ–º–æ—â—å—é LFSR –∏ XOR."""
    string_bytes = plaintext.encode("utf-8")
    bits_in_byte: int = 8
    keystream = lfsr.bits(len(string_bytes) * bits_in_byte)
    encrypted: bytearray = bytearray()
    for byte in string_bytes:
        new_byte: int = 0
        for i in range(bits_in_byte):
            cipher_bit = ((byte >> i) & 1) ^ next(keystream)
            new_byte |= cipher_bit << i
        encrypted.append(new_byte)

    return bytes(encrypted)


def decrypt(ciphertext: bytes, lfsr: LFSR) -> str:
    """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞: –ø–æ–≤—Ç–æ—Ä—è–µ–º XOR —Å —Ç–µ–º –∂–µ LFSR."""
    bits_in_byte: int = 8
    keystream = lfsr.bits(len(ciphertext) * bits_in_byte)
    decrypted: bytearray = bytearray()
    for byte in ciphertext:
        new_byte: int = 0
        for i in range(bits_in_byte):
            plain_bit = ((byte >> i) & 1) ^ next(keystream)
            new_byte |= plain_bit << i
        decrypted.append(new_byte)

    return decrypted.decode("utf-8")


def main():
    # –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    seed = 0b1011
    taps = [0, 1]

    while True:
        print("\n=== LFSR Cipher ===")
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á")
        print("2. –°–º–µ–Ω–∏—Ç—å –∫–ª—é—á")
        print("3. –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç")
        print("4. –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç (hex)")
        print("0. –í—ã—Ö–æ–¥")

        choice = input("> ").strip()

        if choice == "0":
            print("–í—ã—Ö–æ–¥.")
            break

        elif choice == "1":
            print(f"—Å–æ—Å—Ç–æ—è–Ω–∏–µ = {bin(seed)} ({seed})")
            print(f"–±–∏—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ = {taps}")

        elif choice == "2":
            try:
                seed_str = input("–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–≤ –¥–≤–æ–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä. 1011): ").strip()
                seed = int(seed_str, 2)
                length = len(seed_str)
                taps_str = input("Taps (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∏–Ω–¥–µ–∫—Å—ã 0=LSB): ").strip()
                taps = [int(x) for x in taps_str.split(",") if x.strip()]
                if length <= 0:
                    print("–û—à–∏–±–∫–∞: –¥–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0")
                    continue
                if not (0 < seed < (1 << length)):
                    print("–û—à–∏–±–∫–∞: seed –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1..2^length-1")
                    continue
                if any(t < 0 or t >= length for t in taps):
                    print(f"–û—à–∏–±–∫–∞: taps –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0,{length - 1}]")
                    continue

                print("‚úÖ –ö–ª—é—á –∏–∑–º–µ–Ω—ë–Ω.")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–ª—é—á–∞:", e)

        elif choice == "3":
            text = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: ")
            if not text:
                print("–ü—É—Å—Ç–æ–π –≤–≤–æ–¥.")
                continue

            lfsr = LFSR(seed, taps)
            ciphertext = encrypt(text, lfsr)

            print("üîí –®–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç (hex):", ciphertext.hex())
            print("üîí –®–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç (bin):", bytes_to_bits(ciphertext))

        elif choice == "4":
            hex_str = input("–í–≤–µ–¥–∏—Ç–µ —à–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç –≤ hex: ").strip()
            try:
                ciphertext = bytes.fromhex(hex_str)
            except ValueError:
                print("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π hex.")
                continue

            lfsr = LFSR(seed, taps)
            text = decrypt(ciphertext, lfsr)
            print("üìú –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:", text)

        else:
            print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")


if __name__ == "__main__":
    main()
