from LFSR import LFSR


def text_to_bits(s: str) -> list[int]:
    """–ö–æ–¥–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∏—Ç–æ–≤."""
    return [int(b) for ch in s.encode("utf-8") for b in f"{ch:08b}"]


def bits_to_text(bits: list[int]) -> str:
    """–ö–æ–¥–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–µ –≤–æ—Å–µ–º—å –±–∏—Ç–æ–≤ –∫–∞–∫ –æ–¥–Ω—É –±—É–∫–≤—É."""
    b = bytes(int("".join(str(x) for x in bits[i:i+8]), 2)
              for i in range(0, len(bits), 8))
    return b.decode("utf-8")


def xor_bits(a: list[int], b: list[int]) -> list[int]:
    """–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–µ–µ –∏–ª–∏ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–∏—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ –º–∞—Å—Å–∏–≤–∞."""
    return [x ^ y for x, y in zip(a, b)]


def main():
    # –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    length = 4
    seed = 0b1011
    taps = [0, 1]

    while True:
        print("\n=== LFSR Cipher ===")
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á")
        print("2. –°–º–µ–Ω–∏—Ç—å –∫–ª—é—á")
        print("3. –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç")
        print("4. –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç")
        print("0. –í—ã—Ö–æ–¥")

        choice = input("> ").strip()

        if choice == "0":
            print("–í—ã—Ö–æ–¥.")
            break

        elif choice == "1":
            print(f"length = {length}")
            print(f"seed   = {bin(seed)} ({seed})")
            print(f"taps   = {taps}")

        elif choice == "2":
            try:
                length = int(input("–î–ª–∏–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞: "))
                seed_str = input("–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–≤ –¥–≤–æ–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä. 1011): ").strip()
                seed = int(seed_str, 2)
                taps_str = input("Taps (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∏–Ω–¥–µ–∫—Å—ã 0=LSB): ").strip()
                taps = [int(x) for x in taps_str.split(",") if x.strip()]

                if length <= 0:
                    print("–û—à–∏–±–∫–∞: –¥–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0")
                    continue
                if not (0 < seed < (1 << length)):
                    print("–û—à–∏–±–∫–∞: seed –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1..2^length-1")
                    continue
                if any(t < 0 or t >= length for t in taps):
                    print(f"–û—à–∏–±–∫–∞: taps –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0,{length - 1}]")
                    continue

                print("‚úÖ –ö–ª—é—á –∏–∑–º–µ–Ω—ë–Ω.")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–ª—é—á–∞:", e)

        elif choice == "3":
            text = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: ")
            if not text:
                print("–ü—É—Å—Ç–æ–π –≤–≤–æ–¥.")
                continue

            lfsr = LFSR(length, seed, taps)
            bits = text_to_bits(text)
            ks = lfsr.keystream(len(bits))
            cipher_bits = xor_bits(bits, ks)
            print("üîí –®–∏—Ñ—Ä–æ—Ç–µ–∫—Å—Ç (–±–∏—Ç—ã):")
            print("".join(map(str, cipher_bits)))

        elif choice == "4":
            cipher_str = input("–í–≤–µ–¥–∏—Ç–µ –±–∏—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É (—Ç–æ–ª—å–∫–æ 0 –∏ 1): ").strip()
            if not cipher_str or any(ch not in "01" for ch in cipher_str):
                print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É —Ç–æ–ª—å–∫–æ –∏–∑ 0 –∏ 1.")
                continue

            bits = [int(b) for b in cipher_str]
            lfsr = LFSR(length, seed, taps)
            ks = lfsr.keystream(len(bits))
            plain_bits = xor_bits(bits, ks)

            try:
                text = bits_to_text(plain_bits)
                print("üìú –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:", text)
            except Exception:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—Å—Ç.")

        else:
            print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")


if __name__ == "__main__":
    main()

if __name__ == '__main__':
    main()
